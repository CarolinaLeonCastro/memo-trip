import React from 'react';
import { Box, Paper, Typography, Button, Alert } from '@mui/material';
import { useAuth } from '../../hooks/useAuth';
import { authService } from '../../services/auth.service';

const AuthDebug: React.FC = () => {
  const { user, isAuthenticated } = useAuth();

  const diagnoseAuth = () => {
    console.log("üîç Diagnostic d'authentification MemoTrip");
    console.log('‚ïê'.repeat(50));

    console.log("üìä √âtat du contexte d'authentification :");
    console.log('  - isAuthenticated:', isAuthenticated);
    console.log('  - user:', user);

    console.log('\nüîë Informations utilisateur d√©taill√©es :');
    if (user) {
      console.log('  - ID:', user.id);
      console.log('  - Email:', user.email);
      console.log('  - Nom:', user.name);
      console.log('  - R√¥le:', user.role || 'NON D√âFINI');
      console.log('  - Statut:', user.status || 'NON D√âFINI');
      console.log('  - Cr√©√© le:', user.created_at);
      console.log('  - Derni√®re connexion:', user.last_login || 'jamais');

      if (user.role === 'admin') {
        console.log('  üü¢ UTILISATEUR ADMIN - Acc√®s /admin autoris√©');
      } else if (user.role === 'user') {
        console.log('  üîµ UTILISATEUR STANDARD - Acc√®s /admin refus√©');
      } else {
        console.log('  ‚ùå R√îLE NON D√âFINI - Probl√®me potentiel');
      }
    } else {
      console.log('  ‚ùå Aucun utilisateur connect√©');
    }

    console.log('\nüíæ √âtat du stockage :');
    authService.diagnoseStorage();

    console.log('\nüõ†Ô∏è Actions recommand√©es :');
    if (!isAuthenticated) {
      console.log("  1. Connectez-vous d'abord");
    } else if (!user?.role) {
      console.log('  1. Probl√®me : R√¥le utilisateur manquant');
      console.log('  2. V√©rifiez la base de donn√©es');
      console.log('  3. Reconnectez-vous');
    } else if (user.role !== 'admin') {
      console.log("  1. Vous n'√™tes pas admin");
      console.log('  2. Contactez un administrateur pour modifier votre r√¥le');
    } else {
      console.log('  ‚úÖ Tout semble correct !');
    }
  };

  const clearAuth = () => {
    authService.clearAllStorage();
    window.location.reload();
  };

  // Affichage uniquement en mode d√©veloppement
  if (process.env.NODE_ENV === 'production') {
    return null;
  }

  return (
    <Box sx={{ position: 'fixed', bottom: 16, right: 16, zIndex: 9999 }}>
      <Paper sx={{ p: 2, backgroundColor: 'rgba(0,0,0,0.8)', color: 'white' }}>
        <Typography variant="h6" gutterBottom>
          üîß Debug Auth
        </Typography>

        <Typography variant="body2" gutterBottom>
          Statut: {isAuthenticated ? '‚úÖ Connect√©' : '‚ùå D√©connect√©'}
        </Typography>

        {user && (
          <>
            <Typography variant="body2" gutterBottom>
              Utilisateur: {user.name}
            </Typography>
            <Typography variant="body2" gutterBottom>
              R√¥le: {user.role || '‚ùå Non d√©fini'}
            </Typography>

            {user.role !== 'admin' && isAuthenticated && (
              <Alert severity="warning" sx={{ mt: 1, mb: 1 }}>
                Acc√®s /admin refus√© - Pas admin
              </Alert>
            )}

            {!user.role && isAuthenticated && (
              <Alert severity="error" sx={{ mt: 1, mb: 1 }}>
                R√¥le manquant - Probl√®me DB
              </Alert>
            )}
          </>
        )}

        <Box sx={{ mt: 2, display: 'flex', gap: 1, flexDirection: 'column' }}>
          <Button
            size="small"
            variant="outlined"
            onClick={diagnoseAuth}
            sx={{ color: 'white', borderColor: 'white' }}
          >
            Diagnostic Console
          </Button>
          <Button
            size="small"
            variant="outlined"
            onClick={clearAuth}
            sx={{ color: 'white', borderColor: 'white' }}
          >
            Clear Storage
          </Button>
        </Box>
      </Paper>
    </Box>
  );
};

export default AuthDebug;
