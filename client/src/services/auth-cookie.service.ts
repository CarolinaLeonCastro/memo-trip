import { API_CONFIG } from '../config/api.config';

// Configuration de base pour les appels API
const API_BASE_URL = API_CONFIG.BASE_URL;

// Interface pour les r√©ponses d'authentification (sans token)
export interface AuthResponse {
  message: string;
  user: {
    id: string;
    email: string;
    name: string;
    role?: 'user' | 'admin';
    status?: 'active' | 'blocked' | 'pending';
    avatar?: {
      url?: string;
      filename?: string;
      uploadedAt?: string;
    };
    created_at: string;
    last_login?: string;
  };
  // Plus de token ! Il est maintenant dans un cookie HTTPOnly s√©curis√©
}

export interface LoginRequest {
  email: string;
  password: string;
}

export interface RegisterRequest {
  email: string;
  password: string;
  confirmPassword: string;
  name: string;
}

// Service d'authentification avec cookies HTTPOnly s√©curis√©s
class AuthCookieService {
  // Options de requ√™te avec cookies
  private getRequestOptions(method: string, body?: any): RequestInit {
    return {
      method,
      credentials: 'include', // CRUCIAL : envoie automatiquement les cookies
      headers: {
        'Content-Type': 'application/json',
      },
      ...(body && { body: JSON.stringify(body) }),
    };
  }

  // Connexion
  async login(credentials: LoginRequest): Promise<AuthResponse> {
    const response = await fetch(
      `${API_BASE_URL}/auth/login`,
      this.getRequestOptions('POST', credentials)
    );

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || 'Erreur lors de la connexion');
    }

    const data = await response.json();
    console.log('üç™ Connexion r√©ussie - Token stock√© dans cookie HTTPOnly');
    return data;
  }

  // Inscription
  async register(userData: RegisterRequest): Promise<AuthResponse> {
    const response = await fetch(
      `${API_BASE_URL}/auth/register`,
      this.getRequestOptions('POST', userData)
    );

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || "Erreur lors de l'inscription");
    }

    const data = await response.json();
    console.log('üç™ Inscription r√©ussie - Token stock√© dans cookie HTTPOnly');
    return data;
  }

  // D√©connexion (supprime le cookie c√¥t√© serveur)
  async logout(): Promise<void> {
    try {
      await fetch(
        `${API_BASE_URL}/auth/logout`,
        this.getRequestOptions('POST')
      );
      console.log('üç™ D√©connexion r√©ussie - Cookie supprim√©');
    } catch (error) {
      console.error('Erreur lors de la d√©connexion c√¥t√© serveur:', error);
      // Ne pas bloquer la d√©connexion c√¥t√© client m√™me si le serveur √©choue
    }
  }

  // V√©rifier l'utilisateur actuel
  async getCurrentUser(): Promise<{ user: AuthResponse['user'] }> {
    const response = await fetch(
      `${API_BASE_URL}/auth/me`,
      this.getRequestOptions('GET')
    );

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(
        response.status === 401
          ? 'Non authentifi√© ou session expir√©e'
          : `Erreur serveur: ${errorText}`
      );
    }

    return response.json();
  }

  // üöÄ NOUVELLES M√âTHODES SIMPLIFI√âES

  /**
   * V√©rifier si l'utilisateur est connect√©
   * Note: Avec cookies HTTPOnly, on ne peut pas v√©rifier c√¥t√© JS
   * On doit faire un appel serveur
   */
  async isAuthenticated(): Promise<boolean> {
    try {
      await this.getCurrentUser();
      return true;
    } catch {
      return false;
    }
  }

  /**
   * Obtenir les informations utilisateur avec gestion d'erreur
   */
  async getUserSafely(): Promise<AuthResponse['user'] | null> {
    try {
      const response = await this.getCurrentUser();
      return response.user;
    } catch {
      return null;
    }
  }

  /**
   * V√©rifier les permissions (n√©cessite un appel serveur)
   */
  async hasRole(requiredRole: 'user' | 'admin'): Promise<boolean> {
    try {
      const user = await this.getUserSafely();
      if (!user) return false;

      // Admin a tous les droits
      if (user.role === 'admin') return true;

      return user.role === requiredRole;
    } catch {
      return false;
    }
  }

  /**
   * V√©rifier si l'utilisateur est admin
   */
  async isAdmin(): Promise<boolean> {
    return this.hasRole('admin');
  }

  /**
   * Diagnostic de l'authentification avec cookies
   */
  async diagnose(): Promise<void> {
    console.group('üç™ Diagnostic AuthCookieService');

    console.log('üîí S√©curit√©:');
    console.log('  ‚úÖ Token inaccessible depuis JavaScript (protection XSS)');
    console.log('  ‚úÖ Transmission automatique avec chaque requ√™te');
    console.log('  ‚úÖ Synchronisation automatique multi-onglets');
    console.log('  ‚úÖ Gestion expiration c√¥t√© serveur');

    try {
      const user = await this.getUserSafely();
      console.log('üë§ √âtat utilisateur:');
      if (user) {
        console.log(`  Nom: ${user.name}`);
        console.log(`  Email: ${user.email}`);
        console.log(`  R√¥le: ${user.role}`);
        console.log(`  Statut: ${user.status}`);
        console.log('  ‚úÖ Utilisateur connect√©');
      } else {
        console.log('  ‚ùå Utilisateur non connect√©');
      }
    } catch (error) {
      console.log('  ‚ùå Erreur lors de la v√©rification:', error.message);
    }

    console.log('üç™ Avantages des cookies HTTPOnly:');
    console.log('  ‚Ä¢ R√©sistance aux attaques XSS');
    console.log('  ‚Ä¢ Synchronisation automatique multi-onglets');
    console.log('  ‚Ä¢ Pas de gestion manuelle du token');
    console.log('  ‚Ä¢ Expiration automatique');

    console.groupEnd();
  }

  /**
   * M√©thodes h√©rit√©es pour compatibilit√© (maintenant simplifi√©es)
   */

  // Plus besoin de g√©rer le token c√¥t√© client
  getToken(): null {
    console.warn('‚ö†Ô∏è getToken() est obsol√®te avec cookies HTTPOnly');
    return null;
  }

  setToken(): void {
    console.warn('‚ö†Ô∏è setToken() est obsol√®te avec cookies HTTPOnly');
  }

  removeToken(): void {
    console.warn(
      '‚ö†Ô∏è removeToken() est obsol√®te avec cookies HTTPOnly - utilisez logout()'
    );
  }

  // Gestion utilisateur en m√©moire temporaire (pour les composants)
  private cachedUser: AuthResponse['user'] | null = null;
  private cacheExpiry: number = 0;
  private CACHE_DURATION = 30000; // 30 secondes

  async getUser(): Promise<AuthResponse['user'] | null> {
    const now = Date.now();

    // Utiliser le cache si valide
    if (this.cachedUser && now < this.cacheExpiry) {
      return this.cachedUser;
    }

    // Rafra√Æchir depuis le serveur
    try {
      const user = await this.getUserSafely();
      this.cachedUser = user;
      this.cacheExpiry = now + this.CACHE_DURATION;
      return user;
    } catch {
      this.cachedUser = null;
      return null;
    }
  }

  // Invalider le cache (apr√®s login/logout)
  invalidateCache(): void {
    this.cachedUser = null;
    this.cacheExpiry = 0;
  }

  // M√©thodes simplifi√©es pour compatibilit√©
  setUser(): void {
    console.warn('‚ö†Ô∏è setUser() est obsol√®te avec cookies HTTPOnly');
  }

  removeUser(): void {
    this.invalidateCache();
  }

  clearAuth(): void {
    this.invalidateCache();
    // Le logout c√¥t√© serveur est g√©r√© par la m√©thode logout()
  }

  // M√©thodes de diagnostic h√©rit√©es
  clearAllStorage(): void {
    console.log('üßπ Nettoyage cache utilisateur (cookies g√©r√©s c√¥t√© serveur)');
    this.invalidateCache();
  }

  diagnoseStorage(): void {
    console.log('üç™ Stockage hybride:');
    console.log('  - Token: Cookie HTTPOnly s√©curis√© (inaccessible JS)');
    console.log('  - User: Cache temporaire c√¥t√© client (30s)');
    console.log(
      '  - Cache utilisateur:',
      this.cachedUser ? '‚úÖ Pr√©sent' : '‚ùå Absent'
    );
    console.log(
      '  - Cache expire dans:',
      Math.max(0, this.cacheExpiry - Date.now()),
      'ms'
    );
  }
}

// Instance singleton du service d'authentification avec cookies
export const authCookieService = new AuthCookieService();

// Exposer en mode dev
if (import.meta.env.DEV && typeof window !== 'undefined') {
  (window as any).authCookieService = authCookieService;
  (window as any).diagAuth = () => authCookieService.diagnose();
}
